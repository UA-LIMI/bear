---
description: AI service integration patterns and security best practices
globs: **/*
alwaysApply: true
---

- **AI API Integration Security:**
  - **Never expose main API keys** to frontend applications
  - **Use ephemeral token patterns** for frontend-to-AI communication
  - **Implement backend proxy endpoints** for secure API key management
  - **Log all AI API interactions** for audit and debugging purposes
  - **Validate AI API responses** before forwarding to frontend

- **Token Management Patterns:**
  - **Generate ephemeral tokens** on backend with short expiration times
  - **Implement token refresh logic** for long-running sessions
  - **Cache tokens appropriately** with proper TTL management
  - **Validate token formats** before using in API calls
  - **Handle token expiration gracefully** with automatic renewal

- **Real-time AI Integration:**
  - **Research official SDKs** before implementing custom solutions
  - **Use established transport layers** (WebRTC for low latency, WebSocket for compatibility)
  - **Implement connection state management** with proper error handling
  - **Handle audio permissions** and device access gracefully
  - **Provide fallback options** for unsupported environments

- **Error Handling for AI Services:**
  - **Map AI API errors** to user-friendly messages
  - **Implement retry logic** with exponential backoff for transient failures
  - **Handle rate limiting** from AI providers appropriately
  - **Provide specific troubleshooting guidance** in error responses
  - **Log AI service errors** with sufficient context for debugging

- **Performance and Optimization:**
  - **Optimize for low latency** in real-time AI applications
  - **Implement connection pooling** for high-throughput scenarios
  - **Monitor AI API usage** and costs to prevent overuse
  - **Cache AI responses** when appropriate to reduce API calls
  - **Implement request queuing** for managing concurrent AI requests

- **Documentation and Reference:**
  - **Document AI integration patterns** with code examples
  - **Create troubleshooting guides** for common AI service issues
  - **Maintain API specification references** for validation
  - **Link implementation to research** for future maintenance
  - **Update documentation** when AI service patterns change

- **Testing AI Integrations:**
  - **Test with valid and invalid inputs** to validate error handling
  - **Mock AI services** for reliable unit testing
  - **Test rate limiting** and quota management
  - **Validate security patterns** including token management
  - **Test connection recovery** and error scenarios