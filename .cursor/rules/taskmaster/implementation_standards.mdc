---
description: Implementation standards and patterns for building robust, maintainable systems
globs: **/*
alwaysApply: true
---

- **Incremental Implementation Approach:**
  - **Start with minimal working implementation** before adding complexity
  - **Test each component thoroughly** before moving to the next
  - **Build incrementally** rather than implementing everything at once
  - **Validate functionality** at each step before proceeding
  - **Document lessons learned** during implementation for future reference

- **Error Handling and Logging Standards:**
  - **Use structured logging** (Winston, Pino) over console.log statements
  - **Implement centralized error handling** with consistent error response formats
  - **Include request IDs** for tracing and debugging
  - **Log security events** and audit trails for compliance
  - **Sanitize sensitive data** in logs to prevent information leakage

- **Security Implementation Patterns:**
  - **Never expose API keys** or secrets to frontend applications
  - **Use ephemeral tokens** for frontend-to-API communication when possible
  - **Implement proper input validation** using established libraries (express-validator)
  - **Add input sanitization** to prevent XSS and injection attacks
  - **Apply rate limiting** with user-friendly limits during development

- **Middleware and Architecture Standards:**
  - **Follow separation of concerns** - keep middleware modular and focused
  - **Avoid duplicate functionality** - consolidate similar implementations
  - **Use established patterns** for common functionality (CORS, security headers, body parsing)
  - **Implement health checks** compatible with cloud-native standards
  - **Centralize configuration management** in dedicated modules

- **Testing and Validation Approach:**
  - **Create comprehensive test suites** that cover all implemented functionality
  - **Test both success and failure scenarios** for robust error handling
  - **Validate security features** including rate limiting and input validation
  - **Test integration points** between frontend and backend components
  - **Document test results** and maintain test coverage metrics

- **Documentation and Knowledge Management:**
  - **Document API endpoints** with request/response examples
  - **Create implementation guides** for complex integrations
  - **Maintain troubleshooting documentation** with common error scenarios
  - **Link code to documentation** via comments and references
  - **Update documentation** when implementation patterns change

- **Dependency Management:**
  - **Evaluate dependencies carefully** before adding new packages
  - **Prefer established libraries** over custom implementations
  - **Check for existing functionality** in current dependencies
  - **Consider maintenance burden** of additional dependencies
  - **Document dependency choices** and their purpose in the project